# Generated by Django 2.2.16 on 2022-01-11 19:51

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import reviews.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256,
                 unique=True, verbose_name='название')),
                ('slug', models.SlugField(unique=True, verbose_name='уникальный id')),
            ],
            options={
                'verbose_name': 'категория',
                'verbose_name_plural': 'категории',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256,
                 unique=True, verbose_name='название')),
                ('slug', models.SlugField(unique=True, verbose_name='уникальный id')),
            ],
            options={
                'verbose_name': 'жанр',
                'verbose_name_plural': 'жанры',
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='название')),
                (
                    'year',
                    models.PositiveSmallIntegerField(
                        help_text='Введите год в формате: YYYY',
                        validators=[
                            django.core.validators.MinValueValidator(1100),
                            django.core.validators.MaxValueValidator(2022)],
                        verbose_name='год')),
                ('description', models.TextField(verbose_name='описание')),
                ('category',
                 models.ForeignKey(null=True,
                                   on_delete=django.db.models.deletion.SET_NULL,
                                   related_name='titles',
                                   to='reviews.Category',
                                   verbose_name='категория')),
            ],
            options={
                'verbose_name': 'произведение',
                'verbose_name_plural': 'произведения',
            },
        ),
        migrations.CreateModel(
            name='GenreTitle',
            fields=[
                ('id', models.AutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('genre',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='titles',
                                   to='reviews.Genre',
                                   verbose_name='жанр')),
                ('title',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='genres',
                                   to='reviews.Title',
                                   verbose_name='произведение')),
            ],
            options={
                'verbose_name': 'жанр произведения',
                'verbose_name_plural': 'жанры произведений',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('is_superuser',
                 models.BooleanField(default=False,
                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                     verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True,
                 max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,
                 max_length=150, verbose_name='last name')),
                ('is_staff',
                 models.BooleanField(default=False,
                                     help_text='Designates whether the user can log into this admin site.',
                                     verbose_name='staff status')),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active')),
                ('date_joined', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254,
                 unique=True, verbose_name='email address')),
                ('bio', models.TextField(blank=True, verbose_name='biography')),
                ('role',
                 models.CharField(blank=True,
                                  choices=[('user',
                                            'user'),
                                           ('moderator',
                                            'moderator'),
                                           ('admin',
                                            'admin')],
                                  default='user',
                                  max_length=16,
                                  verbose_name='user role')),
                ('confirmation_code', models.IntegerField(
                    default=0, verbose_name='code')),
                ('username', models.CharField(max_length=150, unique=True, validators=[
                 reviews.validators.validate_me], verbose_name='username')),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Group',
                        verbose_name='groups')),
                ('user_permissions',
                 models.ManyToManyField(blank=True,
                                        help_text='Specific permissions for this user.',
                                        related_name='user_set',
                                        related_query_name='user',
                                        to='auth.Permission',
                                        verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='genretitle',
            constraint=models.UniqueConstraint(
                fields=('title', 'genre'), name='unique_genre_title'),
        ),
    ]
